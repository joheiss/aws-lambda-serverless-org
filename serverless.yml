# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-lamda-serverless
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 3
  environment: 
    ORGANIZATIONS_TABLE: ${self:service}-organizations-${opt:stage, self:provider.stage}
    ORGANIZATIONS_TABLE_SECINDEX: ${self:service}-organizations-sec-index-${opt:stage, self:provider.stage}
#  iamRoleStatements:
#    - Effect: Allow
#      Action:
#        - dynamodb:Query
#        - dynamodb:Scan
#        - dynamodb:GetItem
#        - dynamodb:PutItem
#        - dynamodb:UpdateItem
#        - dynamodb:DeleteItem
#      Resource: 
#        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}"
#        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}/index/${self:provider.environment.ORGANIZATIONS_TABLE_SECINDEX}"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-iam-roles-per-function

# you can overwrite defaults here
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  include:
    src/organizations/**/*.ts
  exclude:
     - node_modules/**/*

functions:
  getOrgs:
    handler: src/organizations/handler.getAll
    events:
      - http:
          path: organizations
          method: get
          resp: json
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - dynamodb:Scan
        Resource:
          "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}"

  getOrgTree:
    handler: src/organizations/handler.getTree
    events:
      - http:
          path: organizations/tree/{id}
          method: get
          resp: json   
          cors: true   
    iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}/index/${self:provider.environment.ORGANIZATIONS_TABLE_SECINDEX}"

  getOrgById:
    handler: src/organizations/handler.getById
    events:
      - http:
          path: organizations/{id}
          method: get
          resp: json   
          cors: true   
    iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - dynamodb:GetItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}"   

  createOrg:
    handler: src/organizations/handler.create
    events:
      - http:
          path: organizations
          method: post
          resp: json
          cors: true
    iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}/index/${self:provider.environment.ORGANIZATIONS_TABLE_SECINDEX}"     

  updateOrg:
    handler: src/organizations/handler.update
    events:
      - http:
          path: organizations/{id}
          method: put
          resp: json
          cors: true
    iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}/index/${self:provider.environment.ORGANIZATIONS_TABLE_SECINDEX}"

  deleteOrg:
    handler: src/organizations/handler.remove
    events:
      - http:
          path: organizations/{id}
          method: delete
          resp: json
          cors: true
    iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:Query
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORGANIZATIONS_TABLE}/index/${self:provider.environment.ORGANIZATIONS_TABLE_SECINDEX}"
        
#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    OrganizationsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: parentId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
#          - AttributeName: parentId
#            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ORGANIZATIONS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ORGANIZATIONS_TABLE_SECINDEX}
            KeySchema: 
              - AttributeName: parentId
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1              
